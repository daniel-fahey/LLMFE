{"sample_order": 4, "function": "def modify_features(df_input) -> pd.DataFrame:\n    \"\"\"\n    Thought 1: The absolute difference between Left-Weight and Right-Weight can capture the imbalance in weight distribution.\n    New Feature 1: weight_difference | weight_difference = abs(Left-Weight - Right-Weight)\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    Calculate new features to enhance model's ability to solve the task.\n    \n    New Feature 1: weight_difference | weight_difference = abs(Left-Weight - Right-Weight)\n    New Feature 2: weight_ratio | weight_ratio = Left-Weight / Right-Weight\n    New Feature 3: distance_difference | distance_difference = abs(Left-Distance - Right-Distance)\n    New Feature 4: balance | balance is calculated based on the difference between weights and distances to determine if the scale tips left, right, or balanced.\n    \n    Parameters:\n    df_input (pd.DataFrame): The input DataFrame containing the features.\n    \n    Returns:\n    pd.DataFrame: The modified DataFrame with new features added.\n    \"\"\"\n    df_output = df_input.copy()\n    \n    # Calculate absolute difference between Left-Weight and Right-Weight\n    df_output['weight_difference'] = abs(df_output['Left-Weight'] - df_output['Right-Weight'])\n    \n    # Calculate weight ratio\n    df_output['weight_ratio'] = df_output['Left-Weight'] / df_output['Right-Weight']\n    \n    # Calculate absolute difference between Left-Distance and Right-Distance\n    df_output['distance_difference'] = abs(df_output['Left-Distance'] - df_output['Right-Distance'])\n    \n    # Determine if the balance is left, right, or balanced based on weight and distance differences\n    df_output['balance'] = (1 if df_output['weight_difference'] >= 2 or df_output['distance_difference'] >= 2 else 0) + \\\n                           (1 if df_output['weight_difference'] <= -2 or df_output['distance_difference'] <= -2 else 0)\n    \n    return df_output\n\n", "score": null}