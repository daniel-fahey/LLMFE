{"sample_order": 12, "function": "def modify_features(df_input) -> pd.DataFrame:\n    \"\"\"\n    Thought 1: The absolute difference between Left-Weight and Right-Weight can capture the imbalance in weight distribution.\n    New Feature 1: weight_difference | weight_difference = abs(Left-Weight - Right-Weight)\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    Thought: The interaction between weight and distance on each side can give insight into the balance scale's direction.\n    \n    New Features:\n    1. left_weight_distance_product: left_weight_distance_product = Left-Weight * Left-Distance\n    2. right_weight_distance_product: right_weight_distance_product = Right-Weight * Right-Distance\n    3. weight_ratio: weight_ratio = Left-Weight / Right-Weight if Right-Weight != 0 else 0\n    4. distance_ratio: distance_ratio = Left-Distance / Right-Distance if Right-Distance != 0 else 0\n    \"\"\"\n\n    df_output = df_input.copy()\n    \n    # Calculate product of Left-Weight and Left-Distance\n    df_output['left_weight_distance_product'] = df_output['Left-Weight'] * df_output['Left-Distance']\n    \n    # Calculate product of Right-Weight and Right-Distance\n    df_output['right_weight_distance_product'] = df_output['Right-Weight'] * df_output['Right-Distance']\n    \n    # Calculate the ratio of Left-Weight to Right-Weight\n    # Avoid division by zero using ternary operator\n    df_output['weight_ratio'] = df_output['Left-Weight'] / df_output['Right-Weight'].replace(0, 1)\n    \n    # Calculate the ratio of Left-Distance to Right-Distance\n    # Avoid division by zero using ternary operator\n    df_output['distance_ratio'] = df_output['Left-Distance'] / df_output['Right-Distance'].replace(0, 1)\n    \n    return df_output\n\n", "score": 0.946}