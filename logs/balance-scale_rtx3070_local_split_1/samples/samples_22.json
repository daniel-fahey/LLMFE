{"sample_order": 22, "function": "def modify_features(df_input) -> pd.DataFrame:\n    \"\"\"\n    Thought 1: The absolute difference between Left-Weight and Right-Weight can capture the imbalance in weight distribution.\n    New Feature 1: weight_difference | weight_difference = abs(Left-Weight - Right-Weight)\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    Description: \n        This function generates new features that capture the imbalance in weight distribution, distance distribution, and their interactions.\n        It also calculates a normalized balance index to better understand the balance dynamics.\n    \n    New Features:\n        - weight_difference: absolute difference between Left-Weight and Right-Weight\n        - left_right_distance: absolute difference between Left-Distance and Right-Distance\n        - total_weight: sum of weights from both pans\n        - average_distance: average distance from each pan to the fulcrum\n        - balance_index: normalized balance index considering weight and distance distribution\n    \n    Main Steps:\n        1. Calculate absolute differences between weights and distances.\n        2. Calculate sum of weights and average distance.\n        3. Calculate a normalized balance index.\n    \n    \"\"\"\n    df_output = df_input.copy()\n    \n    # Calculate absolute differences\n    df_output['weight_difference'] = abs(df_output['Left-Weight'] - df_output['Right-Weight'])\n    \n    # Calculate sum of weights\n    df_output['total_weight'] = df_output['Left-Weight'] + df_output['Right-Weight']\n    \n    # Calculate average distance from each pan to the fulcrum\n    df_output['average_distance'] = (df_output['Left-Distance'] + df_output['Right-Distance']) / 2\n    \n    # Calculate absolute difference between Left-Distance and Right-Distance\n    df_output['left_right_distance'] = abs(df_output['Left-Distance'] - df_output['Right-Distance'])\n    \n    # Calculate a normalized balance index\n    df_output['balance_index'] = (df_output['total_weight'] * df_output['average_distance']) / ((df_output['weight_difference'] + 1) * (df_output['left_right_distance'] + 1))\n    \n    return df_output\n\n", "score": 0.9}