{"sample_order": 4, "function": "def modify_features(df_input) -> pd.DataFrame:\n    \"\"\"\n    Thought 1: The absolute difference between Left-Weight and Right-Weight can capture the imbalance in weight distribution.\n    New Feature 1: weight_difference | weight_difference = abs(Left-Weight - Right-Weight)\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    New Feature 2: weight_ratio | weight_ratio = (Left-Weight + Right-Weight) / (Left-Distance + Right-Distance)\n    This feature captures the ratio of total weight to total distance, providing a more nuanced understanding of balance.\n    \n    New Feature 3: left_heaviness | left_heaviness = Left-Weight - Right-Weight\n    This feature measures the difference in weight between the left and right sides, highlighting potential imbalances.\n    \n    New Feature 4: right_heaviness | right_heaviness = Right-Weight - Left-Weight\n    This feature measures the difference in weight between the right and left sides, providing complementary information to left_heaviness.\n    \n    Removed Features:\n        - Left-Distance (less informative compared to weight-related features)\n        - Right-Distance (less informative compared to weight-related features)\n    \n    New Feature 5: balance_tendency | balance_tendency = 'Left' if left_heaviness > right_heaviness else ('Right' if right_heaviness > left_heaviness else 'Balanced')\n    This feature categorizes the tendency of the balance based on the weights, providing a more interpretable result.\n    \"\"\"\n    df_output = df_input.copy()\n    \n    # Calculate weight ratio\n    df_output['weight_ratio'] = (df_output['Left-Weight'] + df_output['Right-Weight']) / (df_output['Left-Distance'] + df_output['Right-Distance'])\n    \n    # Calculate left and right heaviness\n    df_output['left_heaviness'] = df_output['Left-Weight'] - df_output['Right-Weight']\n    df_output['right_heaviness'] = df_output['Right-Weight'] - df_output['Left-Weight']\n    \n    # Remove less informative features\n    df_output.drop(columns=['Left-Distance', 'Right-Distance'], inplace=True)\n    \n    # Categorize balance tendency\n    df_output['balance_tendency'] = np.select([df_output['left_heaviness'] > df_output['right_heaviness']], ['Left'],\n                                               default=np.select([df_output['right_heaviness'] > df_output['left_heaviness']], ['Right'], \n                                                                  default='Balanced'))\n    \n    return df_output\n\n", "score": 0.5680000000000001}